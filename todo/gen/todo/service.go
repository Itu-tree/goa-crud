// Code generated by goa v3.7.3, DO NOT EDIT.
//
// todo service
//
// Command:
// $ goa gen todo/design

package todo

import (
	"context"
	todoviews "todo/gen/todo/views"
)

// Service that manage todo.
type Service interface {
	// Hello implements hello.
	Hello(context.Context, *HelloPayload) (res string, err error)
	// Show implements show.
	Show(context.Context, *ShowPayload) (res *Username, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "todo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"hello", "show"}

// HelloPayload is the payload type of the todo service hello method.
type HelloPayload struct {
	// Name
	Name string
}

// ShowPayload is the payload type of the todo service show method.
type ShowPayload struct {
	// ID
	ID int
}

// Username is the result type of the todo service show method.
type Username struct {
	// ID
	ID *int
	// Name
	Name *string
}

// NewUsername initializes result type Username from viewed result type
// Username.
func NewUsername(vres *todoviews.Username) *Username {
	return newUsername(vres.Projected)
}

// NewViewedUsername initializes viewed result type Username from result type
// Username using the given view.
func NewViewedUsername(res *Username, view string) *todoviews.Username {
	p := newUsernameView(res)
	return &todoviews.Username{Projected: p, View: "default"}
}

// newUsername converts projected type Username to service type Username.
func newUsername(vres *todoviews.UsernameView) *Username {
	res := &Username{
		ID:   vres.ID,
		Name: vres.Name,
	}
	return res
}

// newUsernameView projects result type Username to projected type UsernameView
// using the "default" view.
func newUsernameView(res *Username) *todoviews.UsernameView {
	vres := &todoviews.UsernameView{
		ID:   res.ID,
		Name: res.Name,
	}
	return vres
}
